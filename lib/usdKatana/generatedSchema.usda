#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class BlindDataObject "BlindDataObject" (
    doc = "Container namespace schema for katana blind data from the klf file"
)
{
    bool katana:suppressGroupToAssemblyPromotion (
        doc = "If true don't promote a group to an assembly."
    )
    string katana:type
    bool katana:visible
}

class "ChildMaterialAPI" (
    doc = "Katana-specific extensions of UsdShadeMaterial."
)
{
    uniform string katana:primName (
        doc = """When a Material derives from another, \"base\" Material (see\r
        \"SetBaseMaterial()\"), it seems\r
        natural to think about a \"child\" that inherits from its base Material\r
        \"parent\".\r
        However, in USD, the derived Material cannot be a child of the base Material\r
        because the derives relationship would cause an infinite\r
        recursion in the composition graph (because the derived Material must\r
        inherit not just the base Material prim itself, but all of the shader and\r
        other prims scoped underneath it, which would include the derived Material\r
        itself).\r
\r
        For UI's that want to present the hierarchy that derivation implies,\r
        we provide primName, which specifies the derived Material's\r
        \"relative name\" with respect to the base Material.\r
\r
        For example, a structure that looks like:\r
        - Metal\r
          - .. Brass\r
          - .. Aluminum\r
\r
        will be encoded as\r
        - Metal\r
        - Metal_Brass\r
        - Metal_Aluminum\r
\r
        We set derivedName on Metal_Brass and Metal_Aluminum to Brass and\r
        Aluminum, to be able to have proper child names if the hierarchy\r
        is reconstructed.\r
        """
    )
}

class "KatanaLightAPI" (
    doc = "Katana-specific extensions of UsdLuxLight"
)
{
    uniform double geometry:centerOfInterest = 20 (
        doc = """Center of interest holds a distance extending from the light's\r
        origin in the direction it is facing. This defines a point at which the\r
        light can be pivoted around or translated towards or away from using\r
        Katana's lighting tools.\r
        """
    )
    uniform string[] katana:id (
        doc = """Defines the light shader name used by Katana when\r
        creating the light location. This allows renderer-specific\r
        implementations of lights to be correctly created.\r
        """
    )
}


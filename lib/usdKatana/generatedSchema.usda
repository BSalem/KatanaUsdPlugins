#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
)

class BlindDataObject "BlindDataObject" (
    doc = "Container namespace schema for katana blind data from the klf file"
)
{
    bool katana:suppressGroupToAssemblyPromotion (
        doc = "If true don't promote a group to an assembly."
    )
    string katana:type
    bool katana:visible
}

class "LookAPI" (
    doc = "Katana-specific extensions of UsdShadeMaterial."
)
{
    uniform string katana:primName (
        doc = """When a Material derives from another, \"base\" Material (see
        \"SetBaseMaterial()\"), it seems
        natural to think about a \"child\" that inherits from its base Material
        \"parent\".
        However, in USD, the derived Material cannot be a child of the base Material
        because the derives relationship would cause an infinite
        recursion in the composition graph (because the derived Material must
        inherit not just the base Material prim itself, but all of the shader and
        other prims scoped underneath it, which would include the derived Material
        itself).

        For UI's that want to present the hierarchy that derivation implies,
        we provide primName, which specifies the derived Material's
        \"relative name\" with respect to the base Material.

        For example, a structure that looks like:
        - Metal
          - .. Brass
          - .. Aluminum

        will be encoded as
        - Metal
        - Metal_Brass
        - Metal_Aluminum

        We set derivedName on Metal_Brass and Metal_Aluminum to Brass and
        Aluminum, to be able to have proper child names if the hierarchy
        is reconstructed.
        """
    )
}

class "LightAPI" (
    doc = "Katana-specific entensions of UsdLuxLight"
)
{
    uniform double geometry:centerOfInterest = 20 (
        doc = """Center of interest holds a distance extending from the light's
        origin in the direction it is facing. This defines a point at which the
        light can be pivoted around or translated towards or away from using
        Katana's lighting tools.
        """
    )
    uniform string[] katana:id (
        doc = """Defines the light shader name used by Katana when
        creating the light location. This allows renderer-specific
        implementations of lights to be correctly created.
        """
    )
}
